Question 1
Fill in the blanks of this code to print out the numbers 1 through 7.

number = 1
while number <= 7:
	print(number, end=" ")
	number += 1


COMPLETED
>>>>>>>>>>>>>>>>




The show_letters function should print out each letter of a word on a separate line. Fill in the blanks to make that happen

def show_letters(word):
	for x in word:
		print(x)

show_letters("Hello")
# Should print one line per letter
# This is because strings as opposed to lists are iterable



COMPLETED

>>>>>>>>>>>>>>>>>>>




Complete the function digits(n) that returns how many digits the number has. For example: 25 has 2 digits and 144 has 3 digits. Tip: you can figure out the digits of a number by dividing it by 10 once per digit until there are no digits left.


def digits(n):
	count = 0
	if n == 0:
	  return 1
	while ( n >= 1 ):
		count += 1
		n = n /10
	return count
	
print(digits(25))   # Should print 2
print(digits(144))  # Should print 3
print(digits(1000)) # Should print 4
print(digits(0))    # Should print 1



COMPLETED

>>>>>>>>>>>>>>>>>>>>







Question 4
This function prints out a multiplication table (where each number is the result of multiplying the first number of its row by the number at the top of its column). Fill in the blanks so that calling multiplication_table(1, 3) will print out:

1 2 3 

2 4 6 

3 6 9




def multiplication_table(start, stop):
	for x in ___:
		for y in ___:
			print(str(x*y), end=" ")
		print()

multiplication_table(1, 3)
# Should print the multiplication table shown above




UNSURE


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>









Question 5
The counter function counts down from start to stop when start is bigger than stop, and counts up from start to stop otherwise. Fill in the blanks to make this work correctly.


def counter(start, stop):
	x = start
	if x > stop:
		return_string = "Counting down: "


		while x >= stop:
			return_string += str(x)
			# "Counting down: 2" ; x=2

			if x > stop :
				return_string += ","
				# "Counting down: 2," ; x=2

			x = x - 1
	

	else:
		return_string = "Counting up: "
		while x <= stop:
			return_string += str(x)
			if x < stop:
				return_string += ","
			x = x + 1
	return return_string

print(counter(1, 10)) # Should be "Counting up: 1,2,3,4,5,6,7,8,9,10"
print(counter(2, 1)) # Should be "Counting down: 2,1"
print(counter(5, 5)) # Should be "Counting up: 5"



COMPLETED
>>>>>>>>>>>>>>>>>>>>>



The even_numbers function returns a space-separated string of all positive numbers that are divisible by 2, up to and including the maximum that's passed into the function. For example, even_numbers(6) returns “2 4 6”. Fill in the blank to make this work.



def even_numbers(maximum):
	return_string = ""
	for x in range(2,maximum+1,2):
		return_string += str(x) + " "
	return return_string.strip()

print(even_numbers(6))  # Should be 2 4 6
print(even_numbers(10)) # Should be 2 4 6 8 10
print(even_numbers(1))  # No numbers displayed
print(even_numbers(3))  # Should be 2
print(even_numbers(0))  # No numbers displayed


COMPLETED

>>>>>>>>>>>>>>>>>>>>>>>>>>

STRINGS

>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>


The is_palindrome function checks if a string is a palindrome. A palindrome is a string that can be equally read from left to right or right to left, omitting blank spaces, and ignoring capitalization. Examples of palindromes are words like kayak and radar, and phrases like "Never Odd or Even". Fill in the blanks in this function to return True if the passed string is a palindrome, False if not.


def is_palindrome(input_string):
	# We'll create two strings, to compare them
	new_string = ""
	reverse_string = ""
	# Traverse through each letter of the input string
	for x in input_string:
		# Add any non-blank letters to the 
		# end of one string, and to the front
		# of the other string. 
		if x!= "":
			new_string = x.lower() + new_string
			reverse_string = reverse_string + x.lower()
	# Compare the strings
	if new_string == reverse_string:
		return True
	return False

print(is_palindrome("Never Odd or Even")) # Should be True
print(is_palindrome("abc")) # Should be False
print(is_palindrome("kayak")) # Should be True


>>>>>>>>>>>>>>>>>




Question 2
Using the format method, fill in the gaps in the convert_distance function so that it returns the phrase "X miles equals Y km", with Y having only 1 decimal place. For example, convert_distance(12) should return "12 miles equals 19.2 km".


def convert_distance(miles):
	km = miles * 1.6 
	result = "{} miles equals {:.1f} km".format(miles,km)
	return result

print(convert_distance(12)) # Should be: 12 miles equals 19.2 km
print(convert_distance(5.5)) # Should be: 5.5 miles equals 8.8 km
print(convert_distance(11)) # Should be: 11 miles equals 17.6 km




COMPLETED

>>>>>>>>>>>>>>

Fill in the gaps in the nametag function so that it uses the format method to return first_name and the first initial of last_name followed by a period. For example, nametag("Jane", "Smith") should return "Jane S."

def nametag(first_name, last_name):
	return("{} {:.1s}.".format(first_name,last_name))

print(nametag("Jane", "Smith")) 
# Should display "Jane S." 
print(nametag("Francesco", "Rinaldi")) 
# Should display "Francesco R." 
print(nametag("Jean-Luc", "Grand-Pierre")) 
# Should display "Jean-Luc G." 


COMPLETED
>>>>>>>>>>>>>>>>

The replace_ending function replaces the old string in a sentence with the new string, but only if the sentence ends with the old string. If there is more than one occurrence of the old string in the sentence, only the one at the end is replaced, not all of them. For example, replace_ending("abcabc", "abc", "xyz") should return abcxyz, not xyzxyz or xyzabc. The string comparison is case-sensitive, so replace_ending("abcabc", "ABC", "xyz") should return abcabc (no changes made). 


def replace_ending(sentence, old, new):
    # Check if the old string is at the end of the sentence 
    if sentence.endswith(old):
        # Using i as the slicing index, combine the part
        # of the sentence up to the matched string at the 
        # end with the new string
        i = sentence.split()
        # example ["It's", 'raining', 'cats', 'and', 'cats']
        new_sentence = ' '.join(i[0:-1]) + " " + new

        # logic = The string join() method returns a string by joining all the elements of an iterable (list, string, tuple), separated by the given separator.
        # text = ['Python', 'is', 'a', 'fun', 'programming', 'language']
        # join elements of text with space
        #  print(' '.join(text))
        # Output: Python is a fun programming language

      
        return new_sentence


    return sentence

	
print(replace_ending("It's raining cats and cats", "cats", "dogs")) 
# Should display "It's raining cats and dogs"
print(replace_ending("She sells seashells by the seashore", "seashells", "donuts")) 
# Should display "She sells seashells by the seashore"
print(replace_ending("The weather is nice in May", "may", "april")) 
# Should display "The weather is nice in May"
print(replace_ending("The weather is nice in May", "May", "April")) 
# Should display "The weather is nice in April"



COMPLETED - needed a bit of help with this one
>>>>>>>>>>>>>>>>>>>>>>>>
>>>> LISTS
>>>>
>>>>>>>>>>>>>>>>>>>>>>>>



Given a list of filenames, we want to rename all the files with extension hpp to the extension h. To do this, we would like to generate a new list called newfilenames, consisting of the new filenames. Fill in the blanks in the code using any of the methods you’ve learned thus far, like a for loop or a list comprehension.

filenames = ["program.c", "stdio.hpp", "sample.hpp", "a.out", "math.hpp", "hpp.out"]
# Generate newfilenames as a list containing the new filenames
# using as many lines of code as your chosen method requires.

#initialize our new list
newfilenames=[]
# lets iterate through the list
for i in filenames:
    # split into 2 strings to compare delimited by decimal
    word=i.split(".")
    #print(word)
    #if the last 3 chars are .hpp then match
    if word[1] == "hpp":
            print(word[1])
            newfilenames.append(word[0] + ".h")
            #break
    else:
        newfilenames.append(i)
        # note that i is the original word before being split
        #break


print(newfilenames) 
# Should be ["program.c", "stdio.h", "sample.h", "a.out", "math.h", "hpp.out"]



COMPLETED!!!!!

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


Let's create a function that turns text into pig latin: a simple text transformation that modifies each word moving the first character to the end and appending "ay" to the end. For example, python ends up as ythonpay.

def pig_latin(text):
  say = ""
  # Separate the text into words
  words = text.split()
  for word in words:
    # iterate through each letter in the word
    # Create the pig latin word and add it to the list
    # say=word[0]

    # this maniupulates the string. Get from 2nd letter to the end , add first letter, add "ay"
    # say is not a list , so we cannot append it, we need to concatenate strings instead
    say += (word[1:] + word[0] + "ay" + " ")
    
    
   
    # Turn the list back into a phrase
  return say
		
print(pig_latin("hello how are you")) # Should be "ellohay owhay reaay ouyay"
print(pig_latin("programming in python is fun")) # Should be "rogrammingpay niay ythonpay siay unfay"


COMPLETED!!!!!!!!!

>>>>>>>>>>>>>>>>>>>>>>


The permissions of a file in a Linux system are split into three sets of three permissions: read, write, and execute for the owner, group, and others. Each of the three values can be expressed as an octal number summing each permission, with 4 corresponding to read, 2 to write, and 1 to execute. Or it can be written with a string using the letters r, w, and x or - when the permission is not granted.
 For example: 
 640 is read/write for the owner, read for the group, and no permissions for the others; converted to a string, it would be: "rw-r-----"
 755 is read/write/execute for the owner, and read/execute for group and others; converted to a string, it would be: "rwxr-xr-x"
 Fill in the blanks to make the code convert a permission in octal format into a string format.
 


def octal_to_string(octal):
    result = ""
    value_letters = [(4,"r"),(2,"w"),(1,"x")]
    # Iterate over each of the digits in octal
    for ___ in [int(n) for n in str(octal)]:
        # Check for each of the permissions values
        for value, letter in value_letters:
            if ___ >= value:
                result += ___
                ___ -= value
            else:
                ___
    return result
    
print(octal_to_string(755)) # Should be rwxr-xr-x
print(octal_to_string(644)) # Should be rw-r--r--
print(octal_to_string(750)) # Should be rwxr-x---
print(octal_to_string(600)) # Should be rw-------





>>>>>>>>>>>>>>>>>>>>


The group_list function accepts a group name and a list of members, and returns a string with the format: group_name: member1, member2, … For example, group_list("g", ["a","b","c"]) returns "g: a, b, c". Fill in the gaps in this function to do that.


def group_list(group, users):
  
  # this defines a string
  # techniques to join a list of elements delimited by comma
  # great technique!!!!!!!
    members =', '.join([str(elem) for elem in users])
    #print(members)
    
  # we dont want to return a list
  # a for loop to get all the elements is what we want
  
  
    return( group + ": " + members)
  
print(group_list("Marketing", ["Mike", "Karen", "Jake", "Tasha"])) # Should be "Marketing: Mike, Karen, Jake, Tasha"
print(group_list("Engineering", ["Kim", "Jay", "Tom"])) # Should be "Engineering: Kim, Jay, Tom"
print(group_list("Users", "")) # Should be "Users:"



COMPLETED

>>>>>>>>>>>>>>>>>>


The guest_list function reads in a list of tuples with the name, age, and profession of each party guest, and prints the sentence "Guest is X years old and works as __." for each one. For example, guest_list(('Ken', 30, "Chef"), ("Pat", 35, 'Lawyer'), ('Amanda', 25, "Engineer")) should print out: Ken is 30 years old and works as Chef. Pat is 35 years old and works as Lawyer. Amanda is 25 years old and works as Engineer. Fill in the gaps in this function to do that. 


def guest_list(guests):
	for a,b in enumerate(guests):
        # a is now the index
        # b is now a string
		
		print("{} is {} years old and works as {}".format(b[0],b[1],b[2]))

      

# pass in tuples. We want to break each tuple into idividual elements
# The enumerate() function takes a list as a parameter and returns a tuple for each element in the list
guest_list([('Ken', 30, "Chef"), ("Pat", 35, 'Lawyer'), ('Amanda', 25, "Engineer")])

"""
Output should match:
Ken is 30 years old and works as Chef
Pat is 35 years old and works as Lawyer
Amanda is 25 years old and works as Engineer
"""


COMPLETED!!!!!!!!!!!!!

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



>>>>>>>>>>>>>>>>>>>>>>>>
>>>> DICTIONARIES
>>>>
>>>>>>>>>>>>>>>>>>>>>>>>


The email_list function receives a dictionary, which contains domain names as keys, and a list of users as values. Fill in the blanks to generate a list that contains complete email addresses (e.g. diana.prince@gmail.com).

def email_list(domains):
    # we want to build a list
    # always good practice to initialize a list
	emails = []
	for x,users in domains.items():
	  for user in users:
        # return the list elements + domain into a new list
	    emails.append(user + "@" + x)
	return(emails)
print(email_list({"gmail.com": ["clark.kent", "diana.prince", "peter.parker"], "yahoo.com": ["barbara.gordon", "jean.grey"], "hotmail.com": ["bruce.wayne"]}))



COMPLETED!!!!!!

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


The groups_per_user function receives a dictionary, which contains group names with the list of users. Users can belong to multiple groups. Fill in the blanks to return a dictionary with the users as keys and a list of their groups as values. 


def groups_per_user(group_dictionary):
    # define a dictionary
	user_groups = {}
	# Go through group_dictionary
	for group,users in group_dictionary.items():
		# Now go through the users in the group
		for user in users:
                    # add new entries to the dictionary

                    

                    # This works using the get command 
                    user_groups[user] = user_groups.get(user,[])   + [group]
                    
			# Now add the group to the the list of
            # groups for this user, creating the entry
            # in the dictionary if necessary
            

	return(user_groups)

print(groups_per_user({"local": ["admin", "userA"],
		"public":  ["admin", "userB"],
		"administrator": ["admin"] }))



COMPLETED!!! But needed help
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


The dict.update method updates one dictionary with the items coming from the other dictionary, so that existing entries are replaced and new entries are added. What is the content of the dictionary “wardrobe“ at the end of the following code?

wardrobe = {'shirt': ['red', 'blue', 'white'], 'jeans': ['blue', 'black']}
new_items = {'jeans': ['white'], 'scarf': ['yellow'], 'socks': ['black', 'brown']}
wardrobe.update(new_items)

#  {'shirt': ['red', 'blue', 'white'], 'jeans': ['white'], 'scarf': ['yellow'], 'socks': ['black', 'brown']}


COMPLETED!!!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


The add_prices function returns the total price of all of the groceries in the  dictionary. Fill in the blanks to complete this function.


def add_prices(basket):
	# Initialize the variable that will be used for the calculation
	total = 0
	# Iterate through the dictionary items
	for fruit,price in basket.items():
		# Add each price to the total calculation
		# Hint: how do you access the values of
		# dictionary items?
		total += price
	# Limit the return value to 2 decimal places
	return round(total, 2)  

groceries = {"bananas": 1.56, "apples": 2.50, "oranges": 0.99, "bread": 4.59, 
	"coffee": 6.99, "milk": 3.39, "eggs": 2.98, "cheese": 5.44}

print(add_prices(groceries)) # Should print 28.44

COMPLETED!!!!!!!

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

GRADED ASSESSMENT!!!!!!!!!!!!!!!!!!

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



The format_address function separates out parts of the address string into new strings: house_number and street_name, and returns: "house number X on street named Y". The format of the input string is: numeric house number, followed by the street name which may contain numbers, but never by themselves, and could be several words long. For example, "123 Main Street", "1001 1st Ave", or "55 North Center Drive". Fill in the gaps to complete this function.

def format_address(address_string):

  # TC- turn it into a list where index 0 is the number and the rest is the street name 
  # Declare variables

  address_list=address_string.split()
  street=""

  # Separate the address string into parts

  # Traverse through the address parts
  for x in address_list:
    # Determine if the address part is the
    # house number or part of the street name
    
    if x.isnumeric():
        # Need to convert list to string here!!!!!!
        # ' '.join(list)   is the MOST EASY way to convert list elements into a string!!!!!!!
        # 
        street=' '.join(address_list[1:])
        
    break  
  # Does anything else need to be done 
  # before returning the result?
  
  # TC - we want to return a string sequence


  # Return the formatted string  
  return "house number {} on street named {}".format(x,street)

print(format_address("123 Main Street"))
# Should print: "house number 123 on street named Main Street"

print(format_address("1001 1st Ave"))
# Should print: "house number 1001 on street named 1st Ave"

print(format_address("55 North Center Drive"))
# Should print "house number 55 on street named North Center Drive"



COMPLETED!!!!!!!

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

The highlight_word function changes the given word in a sentence to its upper-case version. For example, highlight_word("Have a nice day", "nice") returns "Have a NICE day". Can you write this function in just one line?

def highlight_word(sentence, word):
	return(sentence.replace(word, word.upper()))

print(highlight_word("Have a nice day", "nice"))
print(highlight_word("Shhh, don't be so loud!", "loud"))
print(highlight_word("Automating with Python is fun", "fun"))


COMPLETED

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Question 3
A professor with two assistants, Jamie and Drew, wants an attendance list of the students, in the order that they arrived in the classroom. Drew was the first one to note which students arrived, and then Jamie took over. After the class, they each entered their lists into the computer and emailed them to the professor, who needs to combine them into one, in the order of each student's arrival. Jamie emailed a follow-up, saying that her list is in reverse order. Complete the steps to combine them into one list as follows: the contents of Drew's list, followed by Jamie's list in reverse order, to get an accurate list of the students as they arrived.


def combine_lists(list1, list2):
  # Generate a new list containing the elements of list2
  # Followed by the elements of list1 in reverse order
  
  # TC - reverse list 1 . There is a specific reverse() method
  #reverse_list1= list1.reverse()
  list1.reverse()
  # for some reason, can't assign a variable to the reverse list outcome
  return(list2 + list1)
	
Jamies_list = ["Alice", "Cindy", "Bobby", "Jan", "Peter"]
Drews_list = ["Mike", "Carol", "Greg", "Marcia"]

print(combine_lists(Jamies_list, Drews_list))


COMPLETED!!!!!!!!!!



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Use a list comprehension to create a list of squared numbers (n*n). The function receives the variables start and end, and returns a list of squares of consecutive numbers between start and end inclusively.
For example, squares(2, 3) should return [4, 9].

def squares(start, end):
	return [ x **2 for x in range(start,end+1) ]

print(squares(2, 3)) # Should be [4, 9]
print(squares(1, 5)) # Should be [1, 4, 9, 16, 25]
print(squares(0, 10)) # Should be [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

COMPLETED!!!!!!

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


Question 5
Complete the code to iterate through the keys and values of the car_prices dictionary, printing out some information about each one.


def car_listing(car_prices):
  result = ""
  # we want each individual key, value item in tuple
  for car,price in car_prices.items():
    result += "{} costs {} dollars".format(car,str(price)) + "\n"
  return result

# { indicates a tuple}
print(car_listing({"Kia Soul":19000, "Lamborghini Diablo":55000, "Ford Fiesta":13000, "Toyota Prius":24000}))


COMPLETED!!!!!!!!

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Taylor and Rory are hosting a party. They sent out invitations, and each one collected responses into dictionaries, with names of their friends and how many guests each friend is bringing. Each dictionary is a partial list, but Rory's list has more current information about the number of guests. Fill in the blanks to combine both dictionaries into one, with each friend listed only once, and the number of guests from Rory's dictionary taking precedence, if a name is included in both dictionaries. Then print the resulting dictionary.

def combine_guests(guests1, guests2):
  # Combine both dictionaries into one, with each key listed 
  # only once, and the value from guests1 taking precedence

    new_list={}
    new_list.update(guests1)
    

    for guest2,number_of_guests_2 in guests2.items():
        # if the name does not exist in any of the keys, add the name to the list
        if guest2 not in guests1.keys():
        #print(guest2)
            new_list.update({guest2:number_of_guests_2})
        #print(new_list)
        #break
            
    return(new_list)

Rorys_guests = { "Adam":2, "Brenda":3, "David":1, "Jose":3, "Charlotte":2, "Terry":1, "Robert":4}  #takes precedence
Taylors_guests = { "David":4, "Nancy":1, "Robert":2, "Adam":1, "Samantha":3, "Chris":5}

print(combine_guests(Rorys_guests, Taylors_guests))



COMPLETED!!!!!!


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


What do the following commands return when animal = "Hippopotamus"?

>>> print(animal[3:6])
>>> print(animal[-5])
>>> print(animal[10:])

pop
t
us



completed!!!!
>>>>>>>>>>>>>>>>>

What does the list "colors" contain after these commands are executed?

colors = ["red", "white", "blue"]
colors.insert(2, "yellow")

>> ['red', 'white', 'yellow', 'blue']
## index starts from 0

COMPLETED


>>>>>>>>>>>>>>>>>>>>






































